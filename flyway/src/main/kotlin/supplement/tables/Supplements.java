/*
 * This file is generated by jOOQ.
 */
package supplement.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import supplement.Keys;
import supplement.Public;
import supplement.tables.Items.ItemsPath;
import supplement.tables.records.SupplementsRecord;


/**
 * サプリメントテーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Supplements extends TableImpl<SupplementsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.supplements</code>
     */
    public static final Supplements SUPPLEMENTS = new Supplements();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SupplementsRecord> getRecordType() {
        return SupplementsRecord.class;
    }

    /**
     * The column <code>public.supplements.id</code>. サプリメントID
     */
    public final TableField<SupplementsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "サプリメントID");

    /**
     * The column <code>public.supplements.name</code>. サプリメント名
     */
    public final TableField<SupplementsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "サプリメント名");

    /**
     * The column <code>public.supplements.created_at</code>.
     */
    public final TableField<SupplementsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.supplements.updated_at</code>.
     */
    public final TableField<SupplementsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Supplements(Name alias, Table<SupplementsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Supplements(Name alias, Table<SupplementsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("サプリメントテーブル"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.supplements</code> table reference
     */
    public Supplements(String alias) {
        this(DSL.name(alias), SUPPLEMENTS);
    }

    /**
     * Create an aliased <code>public.supplements</code> table reference
     */
    public Supplements(Name alias) {
        this(alias, SUPPLEMENTS);
    }

    /**
     * Create a <code>public.supplements</code> table reference
     */
    public Supplements() {
        this(DSL.name("supplements"), null);
    }

    public <O extends Record> Supplements(Table<O> path, ForeignKey<O, SupplementsRecord> childPath, InverseForeignKey<O, SupplementsRecord> parentPath) {
        super(path, childPath, parentPath, SUPPLEMENTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SupplementsPath extends Supplements implements Path<SupplementsRecord> {
        public <O extends Record> SupplementsPath(Table<O> path, ForeignKey<O, SupplementsRecord> childPath, InverseForeignKey<O, SupplementsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SupplementsPath(Name alias, Table<SupplementsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SupplementsPath as(String alias) {
            return new SupplementsPath(DSL.name(alias), this);
        }

        @Override
        public SupplementsPath as(Name alias) {
            return new SupplementsPath(alias, this);
        }

        @Override
        public SupplementsPath as(Table<?> alias) {
            return new SupplementsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SupplementsRecord, Integer> getIdentity() {
        return (Identity<SupplementsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SupplementsRecord> getPrimaryKey() {
        return Keys.SUPPLEMENTS_PKEY;
    }

    @Override
    public List<UniqueKey<SupplementsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SUPPLEMENTS_NAME_KEY);
    }

    private transient ItemsPath _items;

    /**
     * Get the implicit to-many join path to the <code>public.items</code> table
     */
    public ItemsPath items() {
        if (_items == null)
            _items = new ItemsPath(this, null, Keys.ITEMS__ITEMS_SUPPLEMENT_ID_FKEY.getInverseKey());

        return _items;
    }

    @Override
    public Supplements as(String alias) {
        return new Supplements(DSL.name(alias), this);
    }

    @Override
    public Supplements as(Name alias) {
        return new Supplements(alias, this);
    }

    @Override
    public Supplements as(Table<?> alias) {
        return new Supplements(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Supplements rename(String name) {
        return new Supplements(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Supplements rename(Name name) {
        return new Supplements(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Supplements rename(Table<?> name) {
        return new Supplements(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supplements where(Condition condition) {
        return new Supplements(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supplements where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supplements where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supplements where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Supplements where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Supplements where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Supplements where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Supplements where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supplements whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Supplements whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
