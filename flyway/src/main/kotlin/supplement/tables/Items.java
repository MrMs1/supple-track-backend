/*
 * This file is generated by jOOQ.
 */
package supplement.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import supplement.Keys;
import supplement.Public;
import supplement.tables.Supplements.SupplementsPath;
import supplement.tables.records.ItemsRecord;


/**
 * 商品テーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Items extends TableImpl<ItemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.items</code>
     */
    public static final Items ITEMS = new Items();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemsRecord> getRecordType() {
        return ItemsRecord.class;
    }

    /**
     * The column <code>public.items.id</code>. 商品ID
     */
    public final TableField<ItemsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "商品ID");

    /**
     * The column <code>public.items.name</code>. サプリメント名
     */
    public final TableField<ItemsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "サプリメント名");

    /**
     * The column <code>public.items.quantity</code>. 総量
     */
    public final TableField<ItemsRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "総量");

    /**
     * The column <code>public.items.dosage_per_use</code>. 1回の摂取量
     */
    public final TableField<ItemsRecord, Integer> DOSAGE_PER_USE = createField(DSL.name("dosage_per_use"), SQLDataType.INTEGER.nullable(false), this, "1回の摂取量");

    /**
     * The column <code>public.items.daily_intake_frequency</code>. 1日の摂取回数
     */
    public final TableField<ItemsRecord, Integer> DAILY_INTAKE_FREQUENCY = createField(DSL.name("daily_intake_frequency"), SQLDataType.INTEGER.nullable(false), this, "1日の摂取回数");

    /**
     * The column <code>public.items.supply_days</code>. 供給日数
     */
    public final TableField<ItemsRecord, Integer> SUPPLY_DAYS = createField(DSL.name("supply_days"), SQLDataType.INTEGER.nullable(false), this, "供給日数");

    /**
     * The column <code>public.items.expired_at</code>. 賞味期限
     */
    public final TableField<ItemsRecord, LocalDate> EXPIRED_AT = createField(DSL.name("expired_at"), SQLDataType.LOCALDATE.nullable(false), this, "賞味期限");

    /**
     * The column <code>public.items.start_at</code>. 摂取開始日
     */
    public final TableField<ItemsRecord, LocalDate> START_AT = createField(DSL.name("start_at"), SQLDataType.LOCALDATE.nullable(false), this, "摂取開始日");

    /**
     * The column <code>public.items.end_at</code>. 摂取終了日
     */
    public final TableField<ItemsRecord, LocalDate> END_AT = createField(DSL.name("end_at"), SQLDataType.LOCALDATE.nullable(false), this, "摂取終了日");

    /**
     * The column <code>public.items.supplement_id</code>. サプリメントID
     */
    public final TableField<ItemsRecord, Integer> SUPPLEMENT_ID = createField(DSL.name("supplement_id"), SQLDataType.INTEGER, this, "サプリメントID");

    /**
     * The column <code>public.items.created_at</code>.
     */
    public final TableField<ItemsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.items.updated_at</code>.
     */
    public final TableField<ItemsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Items(Name alias, Table<ItemsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Items(Name alias, Table<ItemsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("商品テーブル"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.items</code> table reference
     */
    public Items(String alias) {
        this(DSL.name(alias), ITEMS);
    }

    /**
     * Create an aliased <code>public.items</code> table reference
     */
    public Items(Name alias) {
        this(alias, ITEMS);
    }

    /**
     * Create a <code>public.items</code> table reference
     */
    public Items() {
        this(DSL.name("items"), null);
    }

    public <O extends Record> Items(Table<O> path, ForeignKey<O, ItemsRecord> childPath, InverseForeignKey<O, ItemsRecord> parentPath) {
        super(path, childPath, parentPath, ITEMS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ItemsPath extends Items implements Path<ItemsRecord> {
        public <O extends Record> ItemsPath(Table<O> path, ForeignKey<O, ItemsRecord> childPath, InverseForeignKey<O, ItemsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ItemsPath(Name alias, Table<ItemsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ItemsPath as(String alias) {
            return new ItemsPath(DSL.name(alias), this);
        }

        @Override
        public ItemsPath as(Name alias) {
            return new ItemsPath(alias, this);
        }

        @Override
        public ItemsPath as(Table<?> alias) {
            return new ItemsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ItemsRecord> getPrimaryKey() {
        return Keys.ITEMS_PKEY;
    }

    @Override
    public List<ForeignKey<ItemsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ITEMS__ITEMS_SUPPLEMENT_ID_FKEY);
    }

    private transient SupplementsPath _supplements;

    /**
     * Get the implicit join path to the <code>public.supplements</code> table.
     */
    public SupplementsPath supplements() {
        if (_supplements == null)
            _supplements = new SupplementsPath(this, Keys.ITEMS__ITEMS_SUPPLEMENT_ID_FKEY, null);

        return _supplements;
    }

    @Override
    public Items as(String alias) {
        return new Items(DSL.name(alias), this);
    }

    @Override
    public Items as(Name alias) {
        return new Items(alias, this);
    }

    @Override
    public Items as(Table<?> alias) {
        return new Items(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Items rename(String name) {
        return new Items(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Items rename(Name name) {
        return new Items(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Items rename(Table<?> name) {
        return new Items(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Items where(Condition condition) {
        return new Items(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Items where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Items where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Items where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Items where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Items where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Items where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Items where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Items whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Items whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
